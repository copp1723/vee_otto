#!/usr/bin/env node

import { BaseAgent } from '../core/agents/BaseAgent';
import { ConfigManager } from '../core/utils/ConfigManager';
import { Logger } from '../core/utils/Logger';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

const logger = new Logger('AutomationRunner');

// Generic automation agent using the new structure
class GenericAutomationAgent extends BaseAgent {
  async processData(): Promise<any> {
    // Generic data processing logic
    const page = this.browser.currentPage;
    
    // Example: Extract data from current page
    const title = await page.title();
    const url = page.url();
    
    return {
      title,
      url,
      timestamp: new Date().toISOString()
    };
  }

  async generateReport(): Promise<string> {
    const data = await this.processData();
    
    return `
Automation Report
================
Title: ${data.title}
URL: ${data.url}
Timestamp: ${data.timestamp}

Generated by Generic Automation Agent
    `;
  }
}

async function main() {
  const configName = process.argv[2] || 'default';
  
  logger.info(`🤖 Starting automation with config: ${configName}`);
  
  const agent = new GenericAutomationAgent({
    headless: process.env.HEADLESS === 'true',
    screenshotOnError: true,
    configName
  });
  
  try {
    await agent.execute(async () => {
      const configManager = ConfigManager.getInstance();
      const platformConfig = configManager.getPlatformConfig(configName);
      
      if (platformConfig) {
        logger.info('🔐 Attempting login...');
        
        const loginSuccess = await agent.login({
          url: platformConfig.url,
          usernameSelector: process.env.USERNAME_SELECTOR || 'input[name="username"]',
          passwordSelector: process.env.PASSWORD_SELECTOR || 'input[name="password"]',
          submitSelector: process.env.SUBMIT_SELECTOR || 'button[type="submit"]',
          username: platformConfig.credentials.username,
          password: platformConfig.credentials.password,
          successIndicator: process.env.SUCCESS_INDICATOR || '.dashboard'
        });
        
        if (!loginSuccess) {
          throw new Error('Login failed');
        }
        
        logger.info('✅ Login successful!');
        
        // Handle 2FA if enabled
        if (process.env.ENABLE_2FA === 'true') {
          logger.info('🔑 Handling 2FA...');
          const twoFactorSuccess = await agent.handle2FA({
            enabled: true,
            emailSelector: process.env.TFA_EMAIL_SELECTOR,
            codeInputSelector: process.env.TFA_CODE_SELECTOR,
            submitSelector: process.env.TFA_SUBMIT_SELECTOR,
            successIndicator: process.env.TFA_SUCCESS_INDICATOR
          });
          
          if (twoFactorSuccess) {
            logger.info('✅ 2FA completed successfully!');
          }
        }
      }
      
      // Process data and generate report
      logger.info('📊 Processing data...');
      const report = await agent.generateReport();
      
      console.log('\n' + '='.repeat(50));
      console.log(report);
      console.log('='.repeat(50) + '\n');
      
      logger.info('✨ Automation completed successfully!');
    });
    
  } catch (error) {
    logger.error('💥 Automation failed:', error);
    process.exit(1);
  }
}

// Show usage information
function showUsage() {
  console.log(`
Vee Otto Automation Runner

Usage:
  npm run automation [config-name]
  
Examples:
  npm run automation                    # Use default config
  npm run automation vauto             # Use vAuto config
  npm run automation custom            # Use custom config

Configuration:
  Configs are loaded from ./config/ directory
  Environment variables override config files
  
Available Commands:
  npm run automation -- --help        # Show this help
  npm run automation -- --create-config # Create example configs
  `);
}

// Handle command line arguments
if (process.argv.includes('--help') || process.argv.includes('-h')) {
  showUsage();
  process.exit(0);
}

if (process.argv.includes('--create-config')) {
  const configManager = ConfigManager.getInstance();
  configManager.createExampleConfigs().then(() => {
    console.log('✅ Example configuration files created in ./config/examples/');
    process.exit(0);
  }).catch(error => {
    console.error('❌ Failed to create example configs:', error);
    process.exit(1);
  });
} else {
  // Run main function
  main().catch(error => {
    logger.error('Unhandled error:', error);
    process.exit(1);
  });
}